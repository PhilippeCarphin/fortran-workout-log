#+TITLE: Fortran workout log

This is a rewrite in Fortran of my
[[https://github.com/philippecarphin/rust-workout-log][rust-workout-log]]

Since I'm doing Fotran at my workplace at the Canadian Meteorological Center,
I decided try to reimplement it in Fortran as practice.

* Build

This project depends on 
[[https://github.com/jacobwilliams/json-fortran.git][json-fortran]] which is
also built with CMake.

#+begin_src sh
# Get and build the json-fortran library
cd <your choice>
git clone https://github.com/jacobwilliams/json-fortran
cd json-fortran ; mkdir build ; cd build
jf_prefix=<your choice>  # reused in the CMake command for this repo
cmake .. -DSKIP_DOC_GEN=TRUE -DCMAKE_INSTALL_PREFIX=${jf_prefix}
make install

# Get and build this repo
cd <your choice>
git clone https://github.com/philippecarphin/fortran-workout-log
cd fortran-workout-log ; mkdir build ; cd build
export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:${jf_prefix}
cmake .. [-DCMAKE_INSTALL_PREFIX=<your choice>]
make
make check
#+end_src

For the curious, building and installing =json-fortran= will create a
directory called =jsonfortran-gnu-8.3.0= in =${jf_prefix}= and the =gnu=
comes from =${CMAKE_Fortran_COMPILER_ID}= to support multiple compilers.

Because of this thing with supporting multiple compiliers, it's simpler
to just add =${jf_prefix}= to =CMAKE_PREFIX_PATH= than to do the more classic
=-D<name>_DIR=.  But if one so desired, they would need to do
~-Djsonfortran-GNU_DIR=${jf_prefix}~ or replace GNU with the proper compiler
ID.

After running CMake for =fortran-workout-log=, the =CMAKE_PREFIX_PATH=
variable is no longer necessary.  If you close your shell, you can come back
to the build directory in a new shell and run =make=/=make check= without
needing to redefine it.

* How it works

The workout history is a set of workouts, a workout is a set of exercises and
metadata, an exercise is a set or exercise sets and metadata, and an exercise
set is a weight and a number of reps.

This data is stored in JSON format.

As with [[https://github.com/philippecarphin/c-workout-log][c-workout-log]] a
good amount of code needs to be written to get the data from the JSON file to
native "derived types" (Fotran's structs).

I use the library
[[https://github.com/jacobwilliams/json-fortran.git][json-fortran]] which is
a fork of [[https://github.com/josephalevin/fson][FSON]] that incorporates object
oriented and other nice features from Fortran 2000 and 2003 standards.

* So far

I've figured out how to use the json-fortran library.  It wasn't that hard to
figure out.  With that, I've parsed the files =exercise_set.json= into an
instance of =ExerciseSet=:

And after that I've parsed =exercise.json=
#+begin_src json
{ "weight": 3.14, "reps"  : 15 }
#+end_src
into an instance of =Exercise=:
#+begin_src fortran
    TYPE :: ExerciseSet
        real :: weight
        integer :: reps
    END TYPE
#+end_src

#+begin_src fortran
        SUBROUTINE parse_set_test(ierr)
            implicit none
            integer, intent(out) :: ierr
            LOGICAL :: found
            TYPE(ExerciseSet) :: es
            type(json_file) :: jfile
            type(json_value), pointer :: p
            type(json_core) :: jcore

            call jfile%initialize()
            call jfile%load("../exercise_set.json")
            call jfile%get('weight', es%weight, found)
            call jfile%get('reps', es%reps, found)
            write(error_unit,*) "weight: ", es%weight, "reps: ", es%reps
            ierr = 0
        END SUBROUTINE
#+end_src
did not take too long since we are getting toplevel values of toplevel keys
out of the file.

Then I parsed =exercise.json=
#+begin_src json
{ "info": {"name": "overhead press", "group": "shoulders"},
  "sets": [ { "weight": 1.11, "reps"  : 10 },
            { "weight": 2.22, "reps"  : 20 },
            { "weight": 3.33, "reps"  : 30 }]}
#+end_src
into an instance of =Exercise=:
#+begin_src fortran
    TYPE :: ExerciseInfo
        character(len=:), ALLOCATABLE :: name
        character(len=:), ALLOCATABLE :: group
    END TYPE

    TYPE :: Exercise
        TYPE(ExerciseInfo) :: info
        TYPE(ExerciseSet), dimension(:), ALLOCATABLE :: sets
    END TYPE
#+end_src

This took a bit longer because I was trying to immitate the only example I
could find and I didn't fully understand it but once I did it was pretty
straightforward.

#+begin_src fortran
        SUBROUTINE parse_exercise_test(ierr)
            implicit none
            integer, intent(out) :: ierr
            LOGICAL :: found

            type(json_file) :: jfile
            type(json_value), pointer :: jeinfo, jsets, jset
            type(json_core) :: jcore

            integer :: iset, nb_sets
            TYPE(Exercise) :: exercise

            call jfile%initialize()
            call jfile%load("../exercise.json")
            call jfile%get("info", jeinfo, found)
            call jcore%get(jeinfo, 'name', exercise%info%name, found)
            call jcore%get(jeinfo, 'group', exercise%info%group, found)

            call jfile%get("sets", jsets, found)
            call jcore%info(jsets, n_children=nb_sets)
            allocate(exercise%sets(1:nb_sets))
            do iset = 1, nb_sets
                call jcore%get_child(jsets, iset, jset, found)
                call jcore%get(jset, 'weight', exercise%sets(iset)%weight, found)
                call jcore%get(jset, 'reps', exercise%sets(iset)%reps, found)
            end do
        END SUBROUTINE
#+end_src
With =jfile= we get toplevel items using  =jfile%get(key, jval)= which puts
the item corresponding to the toplevel key =key= in the file in =jval=.

After that, =jcore%get(jval, key, jsub)= looks in the json object =jval= for
the key =key= and returns the corresponding json object in =jsub=.

For arrays, we use =jcore%get_info()= to get its size, then allocate, then use
=jcore%get_child(jarray, idx, jval)= to put the element at index =idx= of
array =jarray= and put it in =jval=.
